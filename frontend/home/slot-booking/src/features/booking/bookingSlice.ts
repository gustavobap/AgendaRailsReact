import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import moment from 'moment';
import { RootState } from '../../app/store';
import { formatDateInput, formatDateUTC, parseDate, parseDateUTC, rangeOverlaps } from '../../components/helper';
import { bookingAPI } from './bookingAPI';

export interface TimeSlot {
  id?: number,
  startDate: string,
  endDate: string
  isBooked: boolean
}

export interface BookingState {
  schedule: Array<TimeSlot>;
  bookedSlots: Array<TimeSlot>;
  duration: number,
  bookingDay: string,
  status: 'idle' | 'loading' | 'failed';
}

const initialState: BookingState = {
  schedule: [],
  bookedSlots: [],
  duration: 0,
  bookingDay: "",
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const setBookingData = createAsyncThunk(
  'booking/setBookingData',
  async (args: { day: Date, duration: number }, thunkAPI) => {
    try{
      const response = await bookingAPI.list(args.day, args.duration);
      const props : Partial<BookingState> = {
        duration: args.duration,
        bookingDay: formatDateInput(args.day),
        bookedSlots: response.data
      }
      return props
    }catch(error: any){
      const message = error?.response?.data || error
      return thunkAPI.rejectWithValue(message)
    }
  }
);

export const bookSlot = createAsyncThunk(
  'booking/bookSlot',
  async (slot: TimeSlot, thunkAPI) => {
    try {
      const response = await bookingAPI.create(slot);  
      return response.data
    }catch(error: any){
      const message = error?.response?.data?.duration?.join(', ') || error
      return thunkAPI.rejectWithValue(message)
    }
  }
);

export const bookingSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    bookingPublished: (state, action: PayloadAction<TimeSlot>) => {
      const recievedSlot = action.payload;
      if(!state.bookedSlots.find((slot) => slot.id === recievedSlot.id)){
        state.bookedSlots.push(recievedSlot)
        state.schedule = calculateAvailableSlots(state)
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(setBookingData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(setBookingData.fulfilled, (state, action) => {
        Object.assign(state, action.payload)
        state.schedule = calculateAvailableSlots(state)
        state.status = 'idle';
      })
      .addCase(setBookingData.rejected, (state, action) => {
        state.status = 'failed';
        console.log(action)
      })
      .addCase(bookSlot.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(bookSlot.fulfilled, (state, action) => {
        state.bookedSlots.push(action.payload)
        state.schedule = calculateAvailableSlots(state)
        state.status = 'idle';
      })
      .addCase(bookSlot.rejected, (state, action) => {
        state.status = 'failed';
        console.log(action)
      })
  },
});

const slotOverlaps = (state: BookingState, startDate: moment.Moment, endDate: moment.Moment) => {
  for(let i = 0; i < state.bookedSlots.length; i++){
    const bookedStart = parseDateUTC(state.bookedSlots[i].startDate)
    const bookedEnd = parseDateUTC(state.bookedSlots[i].endDate)
    if(rangeOverlaps(startDate, endDate, bookedStart, bookedEnd)){
      return true;
    }
  }
  return false;
}

const calculateAvailableSlots = (state: BookingState): Array<TimeSlot> => {
  const startDate = parseDate(state.bookingDay).startOf('day');
  const availableSlots : Array<TimeSlot> = []
  for(let i = 0; i < (60 * 24); i += 15){
    const endDate = moment(startDate).add(state.duration, 'minute')
    availableSlots.push({
      startDate: formatDateUTC(startDate),
      endDate: formatDateUTC(endDate),
      isBooked: slotOverlaps(state, startDate, endDate)
    })
    startDate.add(15, 'minute')
  }
  return availableSlots
}


export const { bookingPublished } = bookingSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSchedule = (state: RootState) => state.timeSlots.schedule
export const selectDay = (state: RootState) => state.timeSlots.bookingDay
export const selectDuration = (state: RootState) => state.timeSlots.duration

export default bookingSlice.reducer;
