import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../app/store';
import { bookingAPI } from './bookingAPI';

export interface TimeSlot{
  id: number,
  start_date: Date,
  end_date: Date
}

export interface BookingState {
  availableSlots: Array<TimeSlot>;
  bookedSlots: Array<TimeSlot>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: BookingState = {
  availableSlots: [],
  bookedSlots: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchTimeSlots = createAsyncThunk(
  'booking/fetchTimeSlots',
  async (date: Date) => {
    const response = await bookingAPI.list(date);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const timeSlotsSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    addBookedSlots: (state, action: PayloadAction<Array<TimeSlot>>) => {
      state.bookedSlots.push(...action.payload)
    },
    addAvailableSlots: (state, action: PayloadAction<Array<TimeSlot>>) => {
      state.availableSlots.push(...action.payload)
    },    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchTimeSlots.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchTimeSlots.fulfilled, (state, action) => {
        state.status = 'idle';
        state.bookedSlots = action.payload;
      })
      .addCase(fetchTimeSlots.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { addBookedSlots, addAvailableSlots } = timeSlotsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectBookedSlots = (state: RootState) => state.timeSlots.bookedSlots
export const selectAvailableSlots = (state: RootState) => state.timeSlots.availableSlots


export default timeSlotsSlice.reducer;
